# Comprehensive Test Script for Makau Rentals API - FIXED VERSION
$baseUrl = "http://localhost/api/accounts"
$timestamp = Get-Date -Format "yyyyMMddHHmmss"
$testEmail = "test_landlord_$timestamp@example.com"
$testPhone = "254712345678"

Write-Host "=== MAKAU RENTALS API TEST STARTING ===" -ForegroundColor Yellow
Write-Host "Timestamp: $timestamp" -ForegroundColor Cyan

# Helper function to make API calls
function Invoke-ApiCall {
    param(
        [string]$Url,
        [string]$Method = "GET",
        [object]$Body = $null,
        [hashtable]$Headers = @{}
    )
    
    try {
        $bodyJson = $null
        if ($Body) {
            $bodyJson = $Body | ConvertTo-Json
        }
        
        Write-Host "[API] $Method $Url" -ForegroundColor Cyan
        $response = Invoke-RestMethod -Uri $Url -Method $Method -Headers $Headers -Body $bodyJson
        Write-Host "[SUCCESS] Request completed" -ForegroundColor Green
        return $response
    }
    catch {
        Write-Host "[ERROR] $Method to $Url : $($_.Exception.Message)" -ForegroundColor Red
        if ($_.Exception.Response) {
            $stream = $_.Exception.Response.GetResponseStream()
            $reader = New-Object System.IO.StreamReader($stream)
            $responseBody = $reader.ReadToEnd()
            Write-Host "[RESPONSE] $responseBody" -ForegroundColor Red
        }
        return $null
    }
}

# 1. Signing up landlord...
Write-Host "1. Signing up landlord..." -ForegroundColor Green
$landlordData = @{
    email = $testEmail
    password = "testpassword123"
    full_name = "Test Landlord"
    phone_number = $testPhone
    user_type = "landlord"
}

$landlordSignup = Invoke-ApiCall -Url "$baseUrl/signup/" -Method "POST" -Body $landlordData -Headers @{"Content-Type"="application/json"}

if (-not $landlordSignup) {
    Write-Host "CRITICAL: Failed to sign up landlord. Cannot continue." -ForegroundColor Red
    exit 1
}

$landlordId = $landlordSignup.user.id
$landlordCode = $landlordSignup.user.landlord_code
Write-Host "Landlord signup successful. ID: $landlordId, Code: $landlordCode" -ForegroundColor Green

# 2. Logging in landlord...
Write-Host "2. Logging in landlord..." -ForegroundColor Green
# FIXED: Added user_type field as required by MyTokenObtainPairSerializer
$loginData = @{
    email = $testEmail
    password = "testpassword123"
    user_type = "landlord"  # This was missing!
}

$loginResponse = Invoke-ApiCall -Url "$baseUrl/token/" -Method "POST" -Body $loginData -Headers @{"Content-Type"="application/json"}
if (-not $loginResponse) {
    Write-Host "Failed to login landlord. Exiting." -ForegroundColor Red
    exit 1
}

$token = $loginResponse.access
$refreshToken = $loginResponse.refresh

$headers = @{
    "Authorization" = "Bearer $token"
    "Content-Type" = "application/json"
}

Write-Host "Landlord login successful" -ForegroundColor Green

# 2.1. Refreshing token...
Write-Host "2.1. Refreshing token..." -ForegroundColor Green
$refreshData = @{
    refresh = $refreshToken
}

$refreshResponse = Invoke-ApiCall -Url "$baseUrl/token/refresh/" -Method "POST" -Body $refreshData -Headers @{"Content-Type"="application/json"}
if ($refreshResponse) {
    $token = $refreshResponse.access
    $headers["Authorization"] = "Bearer $token"
    Write-Host "Token refreshed successfully" -ForegroundColor Green
} else {
    Write-Host "Token refresh failed, continuing with original token" -ForegroundColor Yellow
}

# 2.2. Getting current user info...
Write-Host "2.2. Getting current user info..." -ForegroundColor Green
$userInfo = Invoke-ApiCall -Url "$baseUrl/me/" -Method "GET" -Headers $headers
if ($userInfo) {
    Write-Host "Current user info retrieved" -ForegroundColor Green
} else {
    Write-Host "Failed to get user info" -ForegroundColor Yellow
}

# 2.3. Getting subscription status...
Write-Host "2.3. Getting subscription status..." -ForegroundColor Green
$subscriptionStatus = Invoke-ApiCall -Url "$baseUrl/subscription-status/" -Method "GET" -Headers $headers
if ($subscriptionStatus) {
    Write-Host "Subscription status retrieved" -ForegroundColor Green
} else {
    Write-Host "Subscription status check failed" -ForegroundColor Yellow
}

# 3. Creating property...
Write-Host "3. Creating property..." -ForegroundColor Green
$propertyData = @{
    name = "Test Property $timestamp"
    city = "Nairobi"
    state = "Nairobi County"
    unit_count = 5
}

$propertyResponse = Invoke-ApiCall -Url "$baseUrl/properties/create/" -Method "POST" -Body $propertyData -Headers $headers
if (-not $propertyResponse) {
    Write-Host "Failed to create property. Trying to continue..." -ForegroundColor Red
    $existingProperties = Invoke-ApiCall -Url "$baseUrl/properties/" -Method "GET" -Headers $headers
    if ($existingProperties -and $existingProperties.Count -gt 0) {
        $propertyId = $existingProperties[0].id
        Write-Host "Using existing property ID: $propertyId" -ForegroundColor Yellow
    } else {
        Write-Host "No properties available. Cannot continue." -ForegroundColor Red
        exit 1
    }
} else {
    $propertyId = $propertyResponse.id
    Write-Host "Property created successfully. ID: $propertyId" -ForegroundColor Green
}

# 4. Creating unit type with automatic units...
Write-Host "4. Creating unit type with automatic units..." -ForegroundColor Green
$unitTypeData = @{
    name = "Studio Apartment"
    rent = 15000.00
    deposit = 15000.00
    description = "Test unit type with automatic units"
    unit_count = 3
    property_id = $propertyId
}

$unitTypeResponse = Invoke-ApiCall -Url "$baseUrl/unit-types/" -Method "POST" -Body $unitTypeData -Headers $headers
if (-not $unitTypeResponse) {
    Write-Host "Failed to create unit type." -ForegroundColor Red
    $unitTypeId = $null
} else {
    $unitTypeId = $unitTypeResponse.id
    Write-Host "Unit type created successfully. ID: $unitTypeId" -ForegroundColor Green
}

# Wait for units to be created
Write-Host "Waiting for units to be created..." -ForegroundColor Green
Start-Sleep -Seconds 2

# 5. Listing units...
Write-Host "5. Listing units..." -ForegroundColor Green
$unitsResponse = Invoke-ApiCall -Url "$baseUrl/properties/$propertyId/units/" -Method "GET" -Headers $headers

$unitId = $null
$unitCode = $null

if ($unitsResponse -and $unitsResponse.Count -gt 0) {
    Write-Host "Units found: $($unitsResponse.Count) units" -ForegroundColor Green
    $unitId = $unitsResponse[0].id
    $unitCode = $unitsResponse[0].unit_code
    Write-Host "First unit - ID: $unitId, Code: $unitCode" -ForegroundColor White
} else {
    Write-Host "No units found via property endpoint" -ForegroundColor Yellow
    
    $allUnits = Invoke-ApiCall -Url "$baseUrl/available-units/" -Method "GET" -Headers $headers
    
    if ($allUnits -and $allUnits.Count -gt 0) {
        Write-Host "Units found via alternative endpoint: $($allUnits.Count) units" -ForegroundColor Green
        $unitId = $allUnits[0].id
        $unitCode = $allUnits[0].unit_code
        Write-Host "First unit - ID: $unitId, Code: $unitCode" -ForegroundColor White
    } else {
        Write-Host "No units found. Creating manual unit..." -ForegroundColor Yellow
        
        $unitData = @{
            property_obj = $propertyId
            unit_number = "1"
            unit_type = $unitTypeId
            rent = 15000.00
            deposit = 15000.00
            is_available = $true
        }
        
        $manualUnit = Invoke-ApiCall -Url "$baseUrl/units/create/" -Method "POST" -Body $unitData -Headers $headers
        if ($manualUnit) {
            $unitId = $manualUnit.id
            $unitCode = $manualUnit.unit_code
            Write-Host "Manual unit created successfully. ID: $unitId, Code: $unitCode" -ForegroundColor Green
        } else {
            Write-Host "Failed to create manual unit." -ForegroundColor Red
            $unitCode = "TEST-UNIT-$timestamp"
        }
    }
}

# 5.1. Listing available units...
Write-Host "5.1. Listing available units..." -ForegroundColor Green
$availableUnits = Invoke-ApiCall -Url "$baseUrl/available-units/" -Method "GET" -Headers $headers
if ($availableUnits) {
    $unitCount = if ($availableUnits.Count) { $availableUnits.Count } else { 1 }
    Write-Host "Available units: $unitCount units" -ForegroundColor Green
} else {
    Write-Host "No available units found" -ForegroundColor Yellow
}

# 5.2. Getting dashboard stats...
Write-Host "5.2. Getting dashboard stats..." -ForegroundColor Green
$dashboardStats = Invoke-ApiCall -Url "$baseUrl/dashboard-stats/" -Method "GET" -Headers $headers
if ($dashboardStats) {
    Write-Host "Dashboard stats retrieved" -ForegroundColor Green
} else {
    Write-Host "Failed to get dashboard stats" -ForegroundColor Yellow
}

# 6. Signing up tenant...
Write-Host "6. Signing up tenant..." -ForegroundColor Green
$tenantEmail = "test_tenant_$timestamp@example.com"
$tenantData = @{
    email = $tenantEmail
    password = "testpassword123"
    full_name = "Test Tenant"
    phone_number = "254723456789"
    user_type = "tenant"
    landlord_code = $landlordCode
    unit_code = $unitCode
}

Write-Host "Attempting tenant signup with unit: $unitCode" -ForegroundColor Cyan
$tenantSignup = Invoke-ApiCall -Url "$baseUrl/signup/" -Method "POST" -Body $tenantData -Headers @{"Content-Type"="application/json"}
if (-not $tenantSignup) {
    Write-Host "Failed to sign up tenant. Trying without unit assignment..." -ForegroundColor Red
    
    $tenantDataWithoutUnit = @{
        email = $tenantEmail
        password = "testpassword123"
        full_name = "Test Tenant"
        phone_number = "254723456789"
        user_type = "tenant"
    }
    
    $tenantSignup = Invoke-ApiCall -Url "$baseUrl/signup/" -Method "POST" -Body $tenantDataWithoutUnit -Headers @{"Content-Type"="application/json"}
    if (-not $tenantSignup) {
        Write-Host "CRITICAL: Failed to sign up tenant even without unit assignment." -ForegroundColor Red
        exit 1
    }
}

$tenantId = $tenantSignup.user.id
Write-Host "Tenant signup successful. ID: $tenantId" -ForegroundColor Green

# 7. Logging in tenant...
Write-Host "7. Logging in tenant..." -ForegroundColor Green
# FIXED: Added user_type field for tenant login too
$tenantLoginData = @{
    email = $tenantEmail
    password = "testpassword123"
    user_type = "tenant"  # This was missing!
}

$tenantLoginResponse = Invoke-ApiCall -Url "$baseUrl/token/" -Method "POST" -Body $tenantLoginData -Headers @{"Content-Type"="application/json"}
if (-not $tenantLoginResponse) {
    Write-Host "Failed to login tenant. Exiting." -ForegroundColor Red
    exit 1
}

$tenantToken = $tenantLoginResponse.access
$tenantHeaders = @{
    "Authorization" = "Bearer $tenantToken"
    "Content-Type" = "application/json"
}
Write-Host "Tenant login successful" -ForegroundColor Green

# 7.1. Updating reminder preferences...
Write-Host "7.1. Updating reminder preferences..." -ForegroundColor Green
$reminderData = @{
    reminder_mode = "days_before"
    reminder_value = 5
}

$reminderResponse = Invoke-ApiCall -Url "$baseUrl/update-reminder-preferences/" -Method "PATCH" -Body $reminderData -Headers $tenantHeaders
if ($reminderResponse) {
    Write-Host "Reminder preferences updated successfully" -ForegroundColor Green
} else {
    Write-Host "Failed to update reminder preferences" -ForegroundColor Yellow
}

# 8. Testing tenant accessing their unit info
Write-Host "8. Testing tenant accessing their info..." -ForegroundColor Green
$tenantUnitInfo = Invoke-ApiCall -Url "$baseUrl/me/" -Method "GET" -Headers $tenantHeaders
if ($tenantUnitInfo) {
    Write-Host "Tenant info retrieved successfully" -ForegroundColor Green
} else {
    Write-Host "Failed to get tenant info" -ForegroundColor Yellow
}

# Final Summary
Write-Host "=== TEST COMPLETED ===" -ForegroundColor Green
Write-Host "Landlord ID: $landlordId" -ForegroundColor White
Write-Host "Landlord Code: $landlordCode" -ForegroundColor White
Write-Host "Property ID: $propertyId" -ForegroundColor White
if ($unitTypeId) {
    Write-Host "Unit Type ID: $unitTypeId" -ForegroundColor White
}
Write-Host "Tenant ID: $tenantId" -ForegroundColor White
if ($unitCode) {
    Write-Host "Unit Code: $unitCode" -ForegroundColor White
}
Write-Host "All major operations completed successfully!" -ForegroundColor Green





C:\Users\George Mwangi\Desktop\Makau Rentals>powershell -File app/comprehensive_test.ps1
=== MAKAU RENTALS API TEST STARTING ===
Timestamp: 20251010134559
1. Signing up landlord...
[API] POST http://localhost/api/accounts/signup/
[SUCCESS] Request completed
Landlord signup successful. ID: , Code:
2. Logging in landlord...
[API] POST http://localhost/api/accounts/token/
[SUCCESS] Request completed
Landlord login successful
2.1. Refreshing token...
[API] POST http://localhost/api/accounts/token/refresh/
[SUCCESS] Request completed
Token refreshed successfully
2.2. Getting current user info...
[API] GET http://localhost/api/accounts/me/
[SUCCESS] Request completed
Current user info retrieved
2.3. Getting subscription status...
[API] GET http://localhost/api/accounts/subscription-status/
[SUCCESS] Request completed
Subscription status retrieved
3. Creating property...
[API] POST http://localhost/api/accounts/properties/create/
[SUCCESS] Request completed
Property created successfully. ID: 16
4. Creating unit type with automatic units...
[API] POST http://localhost/api/accounts/unit-types/
[SUCCESS] Request completed
Unit type created successfully. ID: 11
Waiting for units to be created...
5. Listing units...
[API] GET http://localhost/api/accounts/properties/16/units/
[SUCCESS] Request completed
Units found: 3 units
First unit - ID: 6, Code: U-16-Studio-Apartment-1
5.1. Listing available units...
[API] GET http://localhost/api/accounts/available-units/
[SUCCESS] Request completed
Available units: 3 units
5.2. Getting dashboard stats...
[API] GET http://localhost/api/accounts/dashboard-stats/
[SUCCESS] Request completed
Dashboard stats retrieved
6. Signing up tenant...
Attempting tenant signup with unit: U-16-Studio-Apartment-1
[API] POST http://localhost/api/accounts/signup/
[SUCCESS] Request completed
Tenant signup successful. ID:
7. Logging in tenant...
[API] POST http://localhost/api/accounts/token/
[SUCCESS] Request completed
Tenant login successful
7.1. Updating reminder preferences...
[API] PATCH http://localhost/api/accounts/update-reminder-preferences/
[SUCCESS] Request completed
Reminder preferences updated successfully
8. Testing tenant accessing their info...
[API] GET http://localhost/api/accounts/me/
[SUCCESS] Request completed
Tenant info retrieved successfully
=== TEST COMPLETED ===
Landlord ID:
Landlord Code:
Property ID: 16
Unit Type ID: 11
Tenant ID:
Unit Code: U-16-Studio-Apartment-1
All major operations completed successfully!